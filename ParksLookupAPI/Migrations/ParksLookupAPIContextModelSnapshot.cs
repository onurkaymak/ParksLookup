// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParksLookupAPI.Models;

#nullable disable

namespace ParksLookupAPI.Migrations
{
    [DbContext(typeof(ParksLookupAPIContext))]
    partial class ParksLookupAPIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ParksLookupAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "onr",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34f82fb9-c37b-47e7-8bc7-c886e916bbe6",
                            Email = "onur@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ONUR@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFd1YnCR3t9/HUkNC4MYkD+tcQH7TNlxK3zBNMgF3sV/w4QtMjZZAHIgqX4+4OJRGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8ed9565-4870-4dda-a3e2-d188fb777b8f",
                            TwoFactorEnabled = false,
                            UserName = "Onur"
                        });
                });

            modelBuilder.Entity("ParksLookupAPI.Models.Park", b =>
                {
                    b.Property<int>("ParkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ParkId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("Parks");

                    b.HasData(
                        new
                        {
                            ParkId = 1,
                            Name = "Rocky Mountain National Park",
                            StateId = 7,
                            UserId = "onr"
                        },
                        new
                        {
                            ParkId = 2,
                            Name = "North Cascades National Park",
                            StateId = 53,
                            UserId = "onr"
                        },
                        new
                        {
                            ParkId = 3,
                            Name = "Mount Rainier National Park",
                            StateId = 53,
                            UserId = "onr"
                        },
                        new
                        {
                            ParkId = 4,
                            Name = "Crater Lake National Park",
                            StateId = 41,
                            UserId = "onr"
                        });
                });

            modelBuilder.Entity("ParksLookupAPI.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("StateId");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            StateId = 1,
                            Name = "AL"
                        },
                        new
                        {
                            StateId = 2,
                            Name = "AK"
                        },
                        new
                        {
                            StateId = 3,
                            Name = "AS"
                        },
                        new
                        {
                            StateId = 4,
                            Name = "AZ"
                        },
                        new
                        {
                            StateId = 5,
                            Name = "AR"
                        },
                        new
                        {
                            StateId = 6,
                            Name = "CA"
                        },
                        new
                        {
                            StateId = 7,
                            Name = "CO"
                        },
                        new
                        {
                            StateId = 8,
                            Name = "CT"
                        },
                        new
                        {
                            StateId = 9,
                            Name = "DE"
                        },
                        new
                        {
                            StateId = 10,
                            Name = "DC"
                        },
                        new
                        {
                            StateId = 11,
                            Name = "FL"
                        },
                        new
                        {
                            StateId = 12,
                            Name = "GA"
                        },
                        new
                        {
                            StateId = 13,
                            Name = "GU"
                        },
                        new
                        {
                            StateId = 14,
                            Name = "HI"
                        },
                        new
                        {
                            StateId = 15,
                            Name = "ID"
                        },
                        new
                        {
                            StateId = 16,
                            Name = "IL"
                        },
                        new
                        {
                            StateId = 17,
                            Name = "IN"
                        },
                        new
                        {
                            StateId = 18,
                            Name = "IA"
                        },
                        new
                        {
                            StateId = 19,
                            Name = "KS"
                        },
                        new
                        {
                            StateId = 20,
                            Name = "KY"
                        },
                        new
                        {
                            StateId = 21,
                            Name = "LA"
                        },
                        new
                        {
                            StateId = 22,
                            Name = "ME"
                        },
                        new
                        {
                            StateId = 23,
                            Name = "MD"
                        },
                        new
                        {
                            StateId = 24,
                            Name = "MA"
                        },
                        new
                        {
                            StateId = 25,
                            Name = "MI"
                        },
                        new
                        {
                            StateId = 26,
                            Name = "MN"
                        },
                        new
                        {
                            StateId = 27,
                            Name = "MS"
                        },
                        new
                        {
                            StateId = 28,
                            Name = "MO"
                        },
                        new
                        {
                            StateId = 29,
                            Name = "MT"
                        },
                        new
                        {
                            StateId = 30,
                            Name = "NE"
                        },
                        new
                        {
                            StateId = 31,
                            Name = "NV"
                        },
                        new
                        {
                            StateId = 32,
                            Name = "NH"
                        },
                        new
                        {
                            StateId = 33,
                            Name = "NJ"
                        },
                        new
                        {
                            StateId = 34,
                            Name = "NM"
                        },
                        new
                        {
                            StateId = 35,
                            Name = "NY"
                        },
                        new
                        {
                            StateId = 36,
                            Name = "NC"
                        },
                        new
                        {
                            StateId = 37,
                            Name = "ND"
                        },
                        new
                        {
                            StateId = 38,
                            Name = "MP"
                        },
                        new
                        {
                            StateId = 39,
                            Name = "OH"
                        },
                        new
                        {
                            StateId = 40,
                            Name = "OK"
                        },
                        new
                        {
                            StateId = 41,
                            Name = "OR"
                        },
                        new
                        {
                            StateId = 42,
                            Name = "PA"
                        },
                        new
                        {
                            StateId = 43,
                            Name = "PR"
                        },
                        new
                        {
                            StateId = 44,
                            Name = "RI"
                        },
                        new
                        {
                            StateId = 45,
                            Name = "SC"
                        },
                        new
                        {
                            StateId = 46,
                            Name = "SD"
                        },
                        new
                        {
                            StateId = 47,
                            Name = "TN"
                        },
                        new
                        {
                            StateId = 48,
                            Name = "TX"
                        },
                        new
                        {
                            StateId = 49,
                            Name = "UT"
                        },
                        new
                        {
                            StateId = 50,
                            Name = "VT"
                        },
                        new
                        {
                            StateId = 51,
                            Name = "VA"
                        },
                        new
                        {
                            StateId = 52,
                            Name = "VI"
                        },
                        new
                        {
                            StateId = 53,
                            Name = "WA"
                        },
                        new
                        {
                            StateId = 54,
                            Name = "WV"
                        },
                        new
                        {
                            StateId = 55,
                            Name = "WI"
                        },
                        new
                        {
                            StateId = 56,
                            Name = "WY"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ParksLookupAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ParksLookupAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParksLookupAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ParksLookupAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParksLookupAPI.Models.Park", b =>
                {
                    b.HasOne("ParksLookupAPI.Models.State", "State")
                        .WithMany("Parks")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParksLookupAPI.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParksLookupAPI.Models.State", b =>
                {
                    b.Navigation("Parks");
                });
#pragma warning restore 612, 618
        }
    }
}
